diff --git a/client/dist/bundle.js b/client/dist/bundle.js
index 78f659d..4a00cac 100644
--- a/client/dist/bundle.js
+++ b/client/dist/bundle.js
@@ -103,22 +103,52 @@
 	            NUMBER_OF_BULLETS: 10,
 	            SHOT_DELAY: 200, 
 	            animations: [
-	                { name: 'IDLE', frames: ['43'], fps: 10, loop: true }    
+	                { 
+	                    name: 'IDLE', 
+	                    frames: ['43'], 
+	                    fps: 10, 
+	                    loop: true
+	                }    
 	            ]
 	        });
 	        
 	        // load those freakin bullets!
 	        for(var i = 0; i < ship.props.NUMBER_OF_BULLETS; i++) {
-	            var bullet = new Bullet(this.game, 0, 0, 'ships');
+	            var bullet = new Bullet(this.game, 0, 0, 'ships', {
+	                animations: [
+	                    { 
+	                        name: 'IDLE', 
+	                        frames: ['44'], 
+	                        fps: 10, 
+	                        loop: true
+	                    }, { 
+	                        name: 'EXPLODE', 
+	                        frames: ['60', '63', '64'], 
+	                        fps: 10, 
+	                        loop: false
+	                    }
+	                ]
+	            });
 	            bullet.listen(this.eventsOf.collision, bullet.explode);
 	            ship.bullets.add(bullet);
 	            bullet.kill();
 	        }
 	        
+	        var asteroidSprites = ['01','02','03','04','05','06','07','08'];
+	            
 	        asteroids = this.game.add.group();
 	        
 	        for(var j=0;j<20;j++){
-	            var asteroid =  new Asteroid(this.game, Math.random() * this.world.width, Math.random() * this.world.height, 'asteroids');
+	            var asteroid =  new Asteroid(this.game, Math.random() * this.world.width, Math.random() * this.world.height, 'asteroids', {
+	                animations: [
+	                    { 
+	                        name: 'IDLE', 
+	                        frames: [Math.floor(Math.random() * asteroidSprites.length)], 
+	                        fps: 10, 
+	                        loop: true
+	                    }
+	                ]    
+	            });
 	            asteroid.body.velocity.x = asteroid.body.velocity.x + Math.random() * 50 - Math.random() * 50;
 	            asteroid.body.velocity.y = asteroid.body.velocity.y + Math.random() * 50 - Math.random() * 50;
 	            asteroids.add(asteroid);
@@ -145,10 +175,8 @@
 	            this.eventsOf.collision.dispatch({ type: actionTypes.COLLISION });
 	        }.bind(this));
 	        
-	        ship.bullets.forEachAlive(function(bullet){
-	            this.game.physics.arcade.collide(bullet, asteroids, function(){
-	                this.eventsOf.collision.dispatch({ type: actionTypes.HIT });
-	            }.bind(this));
+	        this.game.physics.arcade.collide(ship.bullets, asteroids, function(bullet, asteroid){
+	            this.eventsOf.collision.dispatch({ type: actionTypes.HIT, target: asteroid.id });
 	        }.bind(this));
 	        
 	        if(keys.left.isDown){
@@ -223,6 +251,7 @@
 	            return; 
 	        }
 	        bullet.revive();
+	        bullet.state = [];
 	        bullet.reset(this.x, this.y);
 	
 	        // Shoot it
@@ -354,6 +383,7 @@
 	
 	GameObject.prototype.update = function(){
 	    if(!this.state){ return; }
+	
 	    console.log('state length: ', this.state.length);
 	    var state = this.getState();
 	    this.animations.play(state.type);
@@ -361,7 +391,10 @@
 	};
 	
 	GameObject.prototype.setId = function(){
-	    this.id = this.constructor.name + '-' + (this.x | 0) + '-' + (this.y | 0);
+	    this.id = this.constructor.name + '-' 
+	        + (this.x | 0) + '-' 
+	        + (this.y | 0) + '-'
+	        + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);
 	};
 	
 	GameObject.prototype.debug = function(toDebug){
@@ -380,33 +413,23 @@
 
 	var GameObject = __webpack_require__(/*! ./gameobject.js */ 4);
 	
-	function Asteroid(game, x, y, sprite){
-	    var asteroidSprites = ['01','02','03','04','05','06','07','08'], 
-	        aRandomSprite = Math.floor(Math.random() * asteroidSprites.length),
-	        aRandomSize = Math.random() * 0.2 + 1;
+	function Asteroid(game, x, y, sprite, props){
 	    
-	    GameObject.call(this, game, x, y, sprite);
+	    GameObject.call(this, game, x, y, sprite, props);
 	    this.setId();
-	    this.animations.add('idle', [aRandomSprite], 10, true);
 	    this.body.bounce.setTo(1, 1);
 	    this.body.collideWorldBounds = true;
-	    this.scale.x *= aRandomSize;
-	    this.scale.y *= aRandomSize;
-	    
-	    this.update = function(){
-	        this.animations.play('idle');
-	    };
-	    
-	    this.onHit = function(event){
-	        if(event.type === 'HIT'){
-	            this.kill();
-	        }
-	    };
 	}
 	
 	Asteroid.prototype = Object.create(GameObject.prototype);
 	Asteroid.prototype.constructor = Asteroid;
 	
+	Asteroid.prototype.onHit = function(event){
+	    if(event.type === 'HIT' && event.target === this.id){
+	        this.kill();
+	    }
+	};
+	
 	module.exports = Asteroid;
 
 /***/ },
@@ -418,38 +441,27 @@
 
 	var GameObject = __webpack_require__(/*! ./gameobject.js */ 4);
 	
-	function Bullet(game, x, y, sprite){
-	    
-	    var explosion;
+	function Bullet(game, x, y, sprite, props){
 	    
-	    this.state = 'idle';
-	    
-	    GameObject.call(this, game, x, y, sprite);
+	    GameObject.call(this, game, x, y, sprite, props);
 	    this.setId();
-	    this.animations.add('idle', ['44'], 10, true);
-	    explosion = this.animations.add('explode', ['60', '63', '64'], 10, false);
-	    explosion.onComplete.add(function(){
-	        this.kill();
-	        this.state = 'idle';
-	    }, this);
 	    this.outOfBoundsKill = true;
 	    this.checkWorldBounds = true;
 	    this.allowRotation = true;
-	    
-	    this.update = function(){
-	        this.animations.play(this.state);
-	    };
-	    
-	    this.explode = function(event){
-	        if(event.type === 'HIT'){
-	            this.state = 'explode';
-	        }
-	    };
 	}
 	
 	Bullet.prototype = Object.create(GameObject.prototype);
 	Bullet.prototype.constructor = Bullet;
 	
+	Bullet.prototype.explode = function(event){
+	    if(event.type === 'HIT'){
+	        this.setState({ type: 'EXPLODE', priority: 3, time: this.game.time.now + 100 });
+	        this.game.time.events.add(Phaser.Timer.SECOND * 0.1, function(){
+	            this.setState({ type: 'DIE', priority: 10, time: this.game.time.now + 300 });
+	        }, this);
+	    }
+	};
+	
 	module.exports = Bullet;
 
 /***/ }
diff --git a/client/dist/bundle.js.map b/client/dist/bundle.js.map
index 307823e..0318d95 100644
--- a/client/dist/bundle.js.map
+++ b/client/dist/bundle.js.map
@@ -1 +1 @@
-{"version":3,"sources":["webpack:///webpack/bootstrap fb6d272dfc58ad13fe50","webpack:///./client/src/index.js","webpack:///./client/src/game.js","webpack:///./client/src/actionTypes.js","webpack:///./client/src/ship.js","webpack:///./client/src/gameobject.js","webpack:///./client/src/asteroid.js","webpack:///./client/src/bullet.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA,EAAC,E;;;;;;;;;ACXD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB,oD;AACjB;AACA,UAAS;;AAET;AACA,uBAAsB,kCAAkC;AACxD;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qBAAoB,KAAK;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;;AAET;AACA,+CAA8C,8BAA8B;AAC5E,UAAS;;AAET;AACA;AACA,mDAAkD,wBAAwB;AAC1E,cAAa;AACb,UAAS;;AAET;AACA,0CAAyC,sCAAsC;AAC/E,UAAS;AACT,0CAAyC,uCAAuC;AAChF,UAAS;AACT,0CAAyC,2CAA2C;AACpF;;AAEA;AACA,0CAAyC,oCAAoC;AAC7E,UAAS;AACT,0CAAyC,2CAA2C;AACpF;;AAEA;AACA,0CAAyC,oDAAoD;AAC7F;AACA;AACA;;AAEA,qC;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;;;;ACPA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,wB;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,qB;AACA,oB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,uB;;;;;;;;;AClFA;;AAEA;AACA,4BAA2B;;AAE3B,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL,2EAA0E,sCAAsC;AAChH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA,qBAAoB,QAAQ;AAC5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,6B;;;;;;;;;AClFA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,2B;;;;;;;;;AC7BA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,yB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap fb6d272dfc58ad13fe50\n **/","var AsteroidAdventures = require('./game.js');\n\nvar configs = {\n    WIDTH: 512,\n    HEIGHT: 512,\n    DOM_ELEMENT: 'game'\n};\nvar game = new Phaser.Game(configs.WIDTH, configs.HEIGHT, Phaser.AUTO, configs.DOM_ELEMENT);\ngame.state.add('AsteroidAdventures', AsteroidAdventures);\ngame.state.start('AsteroidAdventures', true, true, { \n    initialConfig: 'some initial state'\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","var actionTypes = require('./actionTypes.js');\nvar Ship = require('./ship.js');\nvar Asteroid = require('./asteroid.js');\nvar Bullet = require('./bullet.js');\n\nfunction AsteroidAdventures(){\n    var keys, \n        ship, \n        asteroids;\n        \n    this.eventsOf = {\n        keys: new Phaser.Signal(),\n        collision: new Phaser.Signal()\n    };\n    \n    this.init = function(config){\n        console.log('[PHASER] init', config);\n    };\n    this.preload = function(){\n        console.log('[PHASER] preload');\n        this.game.load.atlas('ships', '../assets/ships.png', '../assets/ships.json', Phaser.Loader.TEXTURE_ATLAS_JSON_HASH);\n        this.game.load.atlas('asteroids', '../assets/asteroids.png', '../assets/asteroids.json', Phaser.Loader.TEXTURE_ATLAS_JSON_HASH);\n    };\n    this.create = function(){\n        console.log('[PHASER] create');\n        \n        // for fps debugging\n        this.game.time.advancedTiming = true;\n        \n        ship = new Ship(this.game, this.world.centerX, this.world.centerY, 'ships', {\n            ROTATION_SPEED: 180, // degrees/second\n            ACCELERATION: 200, // pixels/second/second\n            MAX_SPEED: 250, // pixels/second\n            NUMBER_OF_BULLETS: 10,\n            SHOT_DELAY: 200, \n            animations: [\n                { name: 'IDLE', frames: ['43'], fps: 10, loop: true }    \n            ]\n        });\n        \n        // load those freakin bullets!\n        for(var i = 0; i < ship.props.NUMBER_OF_BULLETS; i++) {\n            var bullet = new Bullet(this.game, 0, 0, 'ships');\n            bullet.listen(this.eventsOf.collision, bullet.explode);\n            ship.bullets.add(bullet);\n            bullet.kill();\n        }\n        \n        asteroids = this.game.add.group();\n        \n        for(var j=0;j<20;j++){\n            var asteroid =  new Asteroid(this.game, Math.random() * this.world.width, Math.random() * this.world.height, 'asteroids');\n            asteroid.body.velocity.x = asteroid.body.velocity.x + Math.random() * 50 - Math.random() * 50;\n            asteroid.body.velocity.y = asteroid.body.velocity.y + Math.random() * 50 - Math.random() * 50;\n            asteroids.add(asteroid);\n            asteroid.listen(this.eventsOf.collision, asteroid.onHit);\n        }\n        \n        ship.listen(this.eventsOf.keys, ship.onEvents);\n        ship.listen(this.eventsOf.collision, ship.onEvents);\n        \n        keys = this.game.input.keyboard.createCursorKeys();\n        keys.space = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n    };\n    this.update = function(){\n        console.log('[PHASER] update');\n        \n        // fps debugging \n        this.game.debug.text(this.game.time.fps, 5, 20);\n        \n        asteroids.forEachAlive(function(sprite){\n            sprite.debug(sprite.id);\n        });\n        \n        this.game.physics.arcade.collide(ship, asteroids, function(){\n            this.eventsOf.collision.dispatch({ type: actionTypes.COLLISION });\n        }.bind(this));\n        \n        ship.bullets.forEachAlive(function(bullet){\n            this.game.physics.arcade.collide(bullet, asteroids, function(){\n                this.eventsOf.collision.dispatch({ type: actionTypes.HIT });\n            }.bind(this));\n        }.bind(this));\n        \n        if(keys.left.isDown){\n            this.eventsOf.keys.dispatch({ type: actionTypes.MOVE, key: 'left' });\n        } else if(keys.right.isDown){\n            this.eventsOf.keys.dispatch({ type: actionTypes.MOVE, key: 'right' });\n        } else {\n            this.eventsOf.keys.dispatch({ type: actionTypes.MOVE, key: 'no-rotate' });\n        }\n        \n        if(keys.up.isDown){\n            this.eventsOf.keys.dispatch({ type: actionTypes.MOVE, key: 'up' });\n        } else {\n            this.eventsOf.keys.dispatch({ type: actionTypes.MOVE, key: 'no-thrust' });\n        }\n        \n        if(keys.space.isDown){\n            this.eventsOf.keys.dispatch({ type: actionTypes.SHOOT, time: this.game.time.now });\n        }\n    };\n}\n\nmodule.exports = AsteroidAdventures;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/game.js\n ** module id = 1\n ** module chunks = 0\n **/","var actionTypes = {\n    MOVE: 'MOVE',\n    SHOOT: 'SHOOT',\n    COLLISION: 'COLLISION',\n    HIT: 'HIT'\n};\n\nmodule.exports = actionTypes;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/actionTypes.js\n ** module id = 2\n ** module chunks = 0\n **/","var GameObject = require('./gameobject.js');\n\nfunction Ship(game, x, y, sprite, props){\n    GameObject.call(this, game, x, y, sprite, props);\n    this.setId();\n    this.body.collideWorldBounds = true;\n    this.scale.x *= -1;\n    \n    this.bullets = this.game.add.group();\n    \n    this.shoot = function(){\n\n        if(this.hasState('SHOOT')){\n            return;\n        }\n        \n        this.setState({ \n            type: 'SHOOT', \n            priority: 1, \n            time: this.game.time.now + this.props.SHOT_DELAY \n        });\n        \n        var bullet = this.bullets.getFirstDead();\n        if(!bullet){ \n            return; \n        }\n        bullet.revive();\n        bullet.reset(this.x, this.y);\n\n        // Shoot it\n        bullet.rotation = this.rotation;\n        game.physics.arcade.velocityFromRotation(this.rotation, 400, bullet.body.velocity);\n    };\n    \n    this.onEvents = function(event){\n        switch(event.type){\n            case 'MOVE': \n                onMove.call(this, event);\n                break;\n            case 'SHOOT':\n                onShoot.call(this, event);\n                break;\n            case 'COLLISION':\n                onCollision.call(this, event);\n                break;\n        }\n    };\n}\n\nShip.prototype = Object.create(GameObject.prototype);\nShip.prototype.constructor = Ship;\n\n// reducers: \nfunction onMove(event){\n    switch (event.key) {\n        case 'left':\n            this.body.angularVelocity = -this.props.ROTATION_SPEED;\n            break;\n        case 'right':\n            this.body.angularVelocity = this.props.ROTATION_SPEED;\n            break;\n        case 'no-rotate':\n            this.body.angularVelocity = 0;\n            break;\n        case 'up':\n            this.body.acceleration.x = Math.cos(this.rotation) * this.props.ACCELERATION;\n            this.body.acceleration.y = Math.sin(this.rotation) * this.props.ACCELERATION;\n            break;\n        case 'no-thrust':\n            this.body.acceleration.setTo(0, 0);\n            break;\n    }\n}\n\nfunction onShoot(event){\n    this.shoot();\n}\n\nfunction onCollision(event){\n    \n}\n\nmodule.exports = Ship;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/ship.js\n ** module id = 3\n ** module chunks = 0\n **/","function GameObject(game, x, y, sprite, props){\n    \n    this.game = game;\n    this.props = props || { animations: [] };\n    \n    // state object: { type: 'STUN', time: 12077484, priority: 1 }\n    this.state = [];\n    this.DEFAULT_STATE = {\n        type: 'IDLE',\n        time: 0,\n        priority: 0\n    };\n    \n    Phaser.Sprite.call(this, game, x, y, sprite);\n    this.setId();\n    \n    this.props.animations.forEach(function(animation){\n        this.animations.add(animation.name, animation.frames, animation.fps, animation.loop);\n    }.bind(this));\n    \n    this._debugText = this.addChild(this.game.add.text(20, -20, 'debug', { font: \"12px Arial\", fill: \"#ffffff\" }));\n    this._debugText.visible = false;\n    \n    this.game.add.existing(this);\n    this.game.physics.enable(this, Phaser.Physics.ARCADE);\n    this.anchor.setTo(0.5, 0.5);\n}\n\nGameObject.prototype = Object.create(Phaser.Sprite.prototype);\nGameObject.prototype.constructor = GameObject;\n\nGameObject.prototype.listen = function(eventSource, callback){\n    eventSource.add(callback, this);\n};\n\nGameObject.prototype.onEvents = function(event){\n    console.log('[%s]: ', this.constructor.name, event);\n};\n\nGameObject.prototype.setState = function(state){\n    this.state.push(state);\n};\n\nGameObject.prototype.clearState = function(state){\n    this.state = this.state.filter(function(state){\n        return state.time > this.game.time.now;\n    }.bind(this));\n};\n\nGameObject.prototype.getState = function(){\n    // 1. default if no other\n    // 2. highest priority, pop\n    // 3. longest time-span\n    if(!this.state.length){\n        return this.DEFAULT_STATE;\n    }\n    return this.state[0];\n};\n\nGameObject.prototype.hasState = function(stateToTest){\n    return this.state.some(function(state){\n        return state.type === stateToTest && state.time > this.game.time.now;\n    }.bind(this));\n};\n\nGameObject.prototype.update = function(){\n    if(!this.state){ return; }\n    console.log('state length: ', this.state.length);\n    var state = this.getState();\n    this.animations.play(state.type);\n    this.clearState();\n};\n\nGameObject.prototype.setId = function(){\n    this.id = this.constructor.name + '-' + (this.x | 0) + '-' + (this.y | 0);\n};\n\nGameObject.prototype.debug = function(toDebug){\n  this._debugText.visible = true;\n  this._debugText.setText(toDebug || '');\n};\n\nmodule.exports = GameObject;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/gameobject.js\n ** module id = 4\n ** module chunks = 0\n **/","var GameObject = require('./gameobject.js');\n\nfunction Asteroid(game, x, y, sprite){\n    var asteroidSprites = ['01','02','03','04','05','06','07','08'], \n        aRandomSprite = Math.floor(Math.random() * asteroidSprites.length),\n        aRandomSize = Math.random() * 0.2 + 1;\n    \n    GameObject.call(this, game, x, y, sprite);\n    this.setId();\n    this.animations.add('idle', [aRandomSprite], 10, true);\n    this.body.bounce.setTo(1, 1);\n    this.body.collideWorldBounds = true;\n    this.scale.x *= aRandomSize;\n    this.scale.y *= aRandomSize;\n    \n    this.update = function(){\n        this.animations.play('idle');\n    };\n    \n    this.onHit = function(event){\n        if(event.type === 'HIT'){\n            this.kill();\n        }\n    };\n}\n\nAsteroid.prototype = Object.create(GameObject.prototype);\nAsteroid.prototype.constructor = Asteroid;\n\nmodule.exports = Asteroid;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/asteroid.js\n ** module id = 5\n ** module chunks = 0\n **/","var GameObject = require('./gameobject.js');\n\nfunction Bullet(game, x, y, sprite){\n    \n    var explosion;\n    \n    this.state = 'idle';\n    \n    GameObject.call(this, game, x, y, sprite);\n    this.setId();\n    this.animations.add('idle', ['44'], 10, true);\n    explosion = this.animations.add('explode', ['60', '63', '64'], 10, false);\n    explosion.onComplete.add(function(){\n        this.kill();\n        this.state = 'idle';\n    }, this);\n    this.outOfBoundsKill = true;\n    this.checkWorldBounds = true;\n    this.allowRotation = true;\n    \n    this.update = function(){\n        this.animations.play(this.state);\n    };\n    \n    this.explode = function(event){\n        if(event.type === 'HIT'){\n            this.state = 'explode';\n        }\n    };\n}\n\nBullet.prototype = Object.create(GameObject.prototype);\nBullet.prototype.constructor = Bullet;\n\nmodule.exports = Bullet;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/bullet.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}
\ No newline at end of file
+{"version":3,"sources":["webpack:///webpack/bootstrap 1e53b057a5aedc8de15a","webpack:///./client/src/index.js","webpack:///./client/src/game.js","webpack:///./client/src/actionTypes.js","webpack:///./client/src/ship.js","webpack:///./client/src/gameobject.js","webpack:///./client/src/asteroid.js","webpack:///./client/src/bullet.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;ACtCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qD;AACA;AACA,EAAC,E;;;;;;;;;ACXD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kB;AACA;AACA;AACA;AACA;AACA,kB;AACA;AACA,UAAS;;AAET;AACA,uBAAsB,kCAAkC;AACxD;AACA;AACA,sB;AACA;AACA;AACA;AACA;AACA,sBAAqB,G;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,qBAAoB,KAAK;AACzB;AACA;AACA,sB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,UAAS;;AAET;AACA,+CAA8C,8BAA8B;AAC5E,UAAS;;AAET;AACA,+CAA8C,6CAA6C;AAC3F,UAAS;;AAET;AACA,0CAAyC,sCAAsC;AAC/E,UAAS;AACT,0CAAyC,uCAAuC;AAChF,UAAS;AACT,0CAAyC,2CAA2C;AACpF;;AAEA;AACA,0CAAyC,oCAAoC;AAC7E,UAAS;AACT,0CAAyC,2CAA2C;AACpF;;AAEA;AACA,0CAAyC,oDAAoD;AAC7F;AACA;AACA;;AAEA,qC;;;;;;;;;ACpIA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;;;;ACPA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,wB;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA,qB;AACA,oB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,uB;;;;;;;;;ACnFA;;AAEA;AACA,4BAA2B;;AAE3B,uBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,MAAK;;AAEL,2EAA0E,sCAAsC;AAChH;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;;AAEA;AACA,qBAAoB,QAAQ;;AAE5B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,6B;;;;;;;;;ACtFA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,2B;;;;;;;;;ACnBA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,wBAAuB,+DAA+D;AACtF;AACA,4BAA2B,4DAA4D;AACvF,UAAS;AACT;AACA;;AAEA,yB","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1e53b057a5aedc8de15a\n **/","var AsteroidAdventures = require('./game.js');\n\nvar configs = {\n    WIDTH: 512,\n    HEIGHT: 512,\n    DOM_ELEMENT: 'game'\n};\nvar game = new Phaser.Game(configs.WIDTH, configs.HEIGHT, Phaser.AUTO, configs.DOM_ELEMENT);\ngame.state.add('AsteroidAdventures', AsteroidAdventures);\ngame.state.start('AsteroidAdventures', true, true, { \n    initialConfig: 'some initial state'\n});\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","var actionTypes = require('./actionTypes.js');\nvar Ship = require('./ship.js');\nvar Asteroid = require('./asteroid.js');\nvar Bullet = require('./bullet.js');\n\nfunction AsteroidAdventures(){\n    var keys, \n        ship, \n        asteroids;\n        \n    this.eventsOf = {\n        keys: new Phaser.Signal(),\n        collision: new Phaser.Signal()\n    };\n    \n    this.init = function(config){\n        console.log('[PHASER] init', config);\n    };\n    this.preload = function(){\n        console.log('[PHASER] preload');\n        this.game.load.atlas('ships', '../assets/ships.png', '../assets/ships.json', Phaser.Loader.TEXTURE_ATLAS_JSON_HASH);\n        this.game.load.atlas('asteroids', '../assets/asteroids.png', '../assets/asteroids.json', Phaser.Loader.TEXTURE_ATLAS_JSON_HASH);\n    };\n    this.create = function(){\n        console.log('[PHASER] create');\n        \n        // for fps debugging\n        this.game.time.advancedTiming = true;\n        \n        ship = new Ship(this.game, this.world.centerX, this.world.centerY, 'ships', {\n            ROTATION_SPEED: 180, // degrees/second\n            ACCELERATION: 200, // pixels/second/second\n            MAX_SPEED: 250, // pixels/second\n            NUMBER_OF_BULLETS: 10,\n            SHOT_DELAY: 200, \n            animations: [\n                { \n                    name: 'IDLE', \n                    frames: ['43'], \n                    fps: 10, \n                    loop: true\n                }    \n            ]\n        });\n        \n        // load those freakin bullets!\n        for(var i = 0; i < ship.props.NUMBER_OF_BULLETS; i++) {\n            var bullet = new Bullet(this.game, 0, 0, 'ships', {\n                animations: [\n                    { \n                        name: 'IDLE', \n                        frames: ['44'], \n                        fps: 10, \n                        loop: true\n                    }, { \n                        name: 'EXPLODE', \n                        frames: ['60', '63', '64'], \n                        fps: 10, \n                        loop: false\n                    }\n                ]\n            });\n            bullet.listen(this.eventsOf.collision, bullet.explode);\n            ship.bullets.add(bullet);\n            bullet.kill();\n        }\n        \n        var asteroidSprites = ['01','02','03','04','05','06','07','08'];\n            \n        asteroids = this.game.add.group();\n        \n        for(var j=0;j<20;j++){\n            var asteroid =  new Asteroid(this.game, Math.random() * this.world.width, Math.random() * this.world.height, 'asteroids', {\n                animations: [\n                    { \n                        name: 'IDLE', \n                        frames: [Math.floor(Math.random() * asteroidSprites.length)], \n                        fps: 10, \n                        loop: true\n                    }\n                ]    \n            });\n            asteroid.body.velocity.x = asteroid.body.velocity.x + Math.random() * 50 - Math.random() * 50;\n            asteroid.body.velocity.y = asteroid.body.velocity.y + Math.random() * 50 - Math.random() * 50;\n            asteroids.add(asteroid);\n            asteroid.listen(this.eventsOf.collision, asteroid.onHit);\n        }\n        \n        ship.listen(this.eventsOf.keys, ship.onEvents);\n        ship.listen(this.eventsOf.collision, ship.onEvents);\n        \n        keys = this.game.input.keyboard.createCursorKeys();\n        keys.space = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n    };\n    this.update = function(){\n        console.log('[PHASER] update');\n        \n        // fps debugging \n        this.game.debug.text(this.game.time.fps, 5, 20);\n        \n        asteroids.forEachAlive(function(sprite){\n            sprite.debug(sprite.id);\n        });\n        \n        this.game.physics.arcade.collide(ship, asteroids, function(){\n            this.eventsOf.collision.dispatch({ type: actionTypes.COLLISION });\n        }.bind(this));\n        \n        this.game.physics.arcade.collide(ship.bullets, asteroids, function(bullet, asteroid){\n            this.eventsOf.collision.dispatch({ type: actionTypes.HIT, target: asteroid.id });\n        }.bind(this));\n        \n        if(keys.left.isDown){\n            this.eventsOf.keys.dispatch({ type: actionTypes.MOVE, key: 'left' });\n        } else if(keys.right.isDown){\n            this.eventsOf.keys.dispatch({ type: actionTypes.MOVE, key: 'right' });\n        } else {\n            this.eventsOf.keys.dispatch({ type: actionTypes.MOVE, key: 'no-rotate' });\n        }\n        \n        if(keys.up.isDown){\n            this.eventsOf.keys.dispatch({ type: actionTypes.MOVE, key: 'up' });\n        } else {\n            this.eventsOf.keys.dispatch({ type: actionTypes.MOVE, key: 'no-thrust' });\n        }\n        \n        if(keys.space.isDown){\n            this.eventsOf.keys.dispatch({ type: actionTypes.SHOOT, time: this.game.time.now });\n        }\n    };\n}\n\nmodule.exports = AsteroidAdventures;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/game.js\n ** module id = 1\n ** module chunks = 0\n **/","var actionTypes = {\n    MOVE: 'MOVE',\n    SHOOT: 'SHOOT',\n    COLLISION: 'COLLISION',\n    HIT: 'HIT'\n};\n\nmodule.exports = actionTypes;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/actionTypes.js\n ** module id = 2\n ** module chunks = 0\n **/","var GameObject = require('./gameobject.js');\n\nfunction Ship(game, x, y, sprite, props){\n    GameObject.call(this, game, x, y, sprite, props);\n    this.setId();\n    this.body.collideWorldBounds = true;\n    this.scale.x *= -1;\n    \n    this.bullets = this.game.add.group();\n    \n    this.shoot = function(){\n\n        if(this.hasState('SHOOT')){\n            return;\n        }\n        \n        this.setState({ \n            type: 'SHOOT', \n            priority: 1, \n            time: this.game.time.now + this.props.SHOT_DELAY \n        });\n        \n        var bullet = this.bullets.getFirstDead();\n        if(!bullet){ \n            return; \n        }\n        bullet.revive();\n        bullet.state = [];\n        bullet.reset(this.x, this.y);\n\n        // Shoot it\n        bullet.rotation = this.rotation;\n        game.physics.arcade.velocityFromRotation(this.rotation, 400, bullet.body.velocity);\n    };\n    \n    this.onEvents = function(event){\n        switch(event.type){\n            case 'MOVE': \n                onMove.call(this, event);\n                break;\n            case 'SHOOT':\n                onShoot.call(this, event);\n                break;\n            case 'COLLISION':\n                onCollision.call(this, event);\n                break;\n        }\n    };\n}\n\nShip.prototype = Object.create(GameObject.prototype);\nShip.prototype.constructor = Ship;\n\n// reducers: \nfunction onMove(event){\n    switch (event.key) {\n        case 'left':\n            this.body.angularVelocity = -this.props.ROTATION_SPEED;\n            break;\n        case 'right':\n            this.body.angularVelocity = this.props.ROTATION_SPEED;\n            break;\n        case 'no-rotate':\n            this.body.angularVelocity = 0;\n            break;\n        case 'up':\n            this.body.acceleration.x = Math.cos(this.rotation) * this.props.ACCELERATION;\n            this.body.acceleration.y = Math.sin(this.rotation) * this.props.ACCELERATION;\n            break;\n        case 'no-thrust':\n            this.body.acceleration.setTo(0, 0);\n            break;\n    }\n}\n\nfunction onShoot(event){\n    this.shoot();\n}\n\nfunction onCollision(event){\n    \n}\n\nmodule.exports = Ship;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/ship.js\n ** module id = 3\n ** module chunks = 0\n **/","function GameObject(game, x, y, sprite, props){\n    \n    this.game = game;\n    this.props = props || { animations: [] };\n    \n    // state object: { type: 'STUN', time: 12077484, priority: 1 }\n    this.state = [];\n    this.DEFAULT_STATE = {\n        type: 'IDLE',\n        time: 0,\n        priority: 0\n    };\n    \n    Phaser.Sprite.call(this, game, x, y, sprite);\n    this.setId();\n    \n    this.props.animations.forEach(function(animation){\n        this.animations.add(animation.name, animation.frames, animation.fps, animation.loop);\n    }.bind(this));\n    \n    this._debugText = this.addChild(this.game.add.text(20, -20, 'debug', { font: \"12px Arial\", fill: \"#ffffff\" }));\n    this._debugText.visible = false;\n    \n    this.game.add.existing(this);\n    this.game.physics.enable(this, Phaser.Physics.ARCADE);\n    this.anchor.setTo(0.5, 0.5);\n}\n\nGameObject.prototype = Object.create(Phaser.Sprite.prototype);\nGameObject.prototype.constructor = GameObject;\n\nGameObject.prototype.listen = function(eventSource, callback){\n    eventSource.add(callback, this);\n};\n\nGameObject.prototype.onEvents = function(event){\n    console.log('[%s]: ', this.constructor.name, event);\n};\n\nGameObject.prototype.setState = function(state){\n    this.state.push(state);\n};\n\nGameObject.prototype.clearState = function(state){\n    this.state = this.state.filter(function(state){\n        return state.time > this.game.time.now;\n    }.bind(this));\n};\n\nGameObject.prototype.getState = function(){\n    // 1. default if no other\n    // 2. highest priority, pop\n    // 3. longest time-span\n    if(!this.state.length){\n        return this.DEFAULT_STATE;\n    }\n    return this.state[0];\n};\n\nGameObject.prototype.hasState = function(stateToTest){\n    return this.state.some(function(state){\n        return state.type === stateToTest && state.time > this.game.time.now;\n    }.bind(this));\n};\n\nGameObject.prototype.update = function(){\n    if(!this.state){ return; }\n\n    console.log('state length: ', this.state.length);\n    var state = this.getState();\n    this.animations.play(state.type);\n    this.clearState();\n};\n\nGameObject.prototype.setId = function(){\n    this.id = this.constructor.name + '-' \n        + (this.x | 0) + '-' \n        + (this.y | 0) + '-'\n        + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);\n};\n\nGameObject.prototype.debug = function(toDebug){\n  this._debugText.visible = true;\n  this._debugText.setText(toDebug || '');\n};\n\nmodule.exports = GameObject;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/gameobject.js\n ** module id = 4\n ** module chunks = 0\n **/","var GameObject = require('./gameobject.js');\n\nfunction Asteroid(game, x, y, sprite, props){\n    \n    GameObject.call(this, game, x, y, sprite, props);\n    this.setId();\n    this.body.bounce.setTo(1, 1);\n    this.body.collideWorldBounds = true;\n}\n\nAsteroid.prototype = Object.create(GameObject.prototype);\nAsteroid.prototype.constructor = Asteroid;\n\nAsteroid.prototype.onHit = function(event){\n    if(event.type === 'HIT' && event.target === this.id){\n        this.kill();\n    }\n};\n\nmodule.exports = Asteroid;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/asteroid.js\n ** module id = 5\n ** module chunks = 0\n **/","var GameObject = require('./gameobject.js');\n\nfunction Bullet(game, x, y, sprite, props){\n    \n    GameObject.call(this, game, x, y, sprite, props);\n    this.setId();\n    this.outOfBoundsKill = true;\n    this.checkWorldBounds = true;\n    this.allowRotation = true;\n}\n\nBullet.prototype = Object.create(GameObject.prototype);\nBullet.prototype.constructor = Bullet;\n\nBullet.prototype.explode = function(event){\n    if(event.type === 'HIT'){\n        this.setState({ type: 'EXPLODE', priority: 3, time: this.game.time.now + 100 });\n        this.game.time.events.add(Phaser.Timer.SECOND * 0.1, function(){\n            this.setState({ type: 'DIE', priority: 10, time: this.game.time.now + 300 });\n        }, this);\n    }\n};\n\nmodule.exports = Bullet;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./client/src/bullet.js\n ** module id = 6\n ** module chunks = 0\n **/"],"sourceRoot":""}
\ No newline at end of file
diff --git a/client/src/asteroid.js b/client/src/asteroid.js
index 7182e42..125b690 100644
--- a/client/src/asteroid.js
+++ b/client/src/asteroid.js
@@ -1,30 +1,20 @@
 var GameObject = require('./gameobject.js');
 
-function Asteroid(game, x, y, sprite){
-    var asteroidSprites = ['01','02','03','04','05','06','07','08'], 
-        aRandomSprite = Math.floor(Math.random() * asteroidSprites.length),
-        aRandomSize = Math.random() * 0.2 + 1;
+function Asteroid(game, x, y, sprite, props){
     
-    GameObject.call(this, game, x, y, sprite);
+    GameObject.call(this, game, x, y, sprite, props);
     this.setId();
-    this.animations.add('idle', [aRandomSprite], 10, true);
     this.body.bounce.setTo(1, 1);
     this.body.collideWorldBounds = true;
-    this.scale.x *= aRandomSize;
-    this.scale.y *= aRandomSize;
-    
-    this.update = function(){
-        this.animations.play('idle');
-    };
-    
-    this.onHit = function(event){
-        if(event.type === 'HIT'){
-            this.kill();
-        }
-    };
 }
 
 Asteroid.prototype = Object.create(GameObject.prototype);
 Asteroid.prototype.constructor = Asteroid;
 
+Asteroid.prototype.onHit = function(event){
+    if(event.type === 'HIT' && event.target === this.id){
+        this.kill();
+    }
+};
+
 module.exports = Asteroid;
\ No newline at end of file
diff --git a/client/src/bullet.js b/client/src/bullet.js
index 286c9a2..ab8e12b 100644
--- a/client/src/bullet.js
+++ b/client/src/bullet.js
@@ -1,35 +1,24 @@
 var GameObject = require('./gameobject.js');
 
-function Bullet(game, x, y, sprite){
+function Bullet(game, x, y, sprite, props){
     
-    var explosion;
-    
-    this.state = 'idle';
-    
-    GameObject.call(this, game, x, y, sprite);
+    GameObject.call(this, game, x, y, sprite, props);
     this.setId();
-    this.animations.add('idle', ['44'], 10, true);
-    explosion = this.animations.add('explode', ['60', '63', '64'], 10, false);
-    explosion.onComplete.add(function(){
-        this.kill();
-        this.state = 'idle';
-    }, this);
     this.outOfBoundsKill = true;
     this.checkWorldBounds = true;
     this.allowRotation = true;
-    
-    this.update = function(){
-        this.animations.play(this.state);
-    };
-    
-    this.explode = function(event){
-        if(event.type === 'HIT'){
-            this.state = 'explode';
-        }
-    };
 }
 
 Bullet.prototype = Object.create(GameObject.prototype);
 Bullet.prototype.constructor = Bullet;
 
+Bullet.prototype.explode = function(event){
+    if(event.type === 'HIT'){
+        this.setState({ type: 'EXPLODE', priority: 3, time: this.game.time.now + 100 });
+        this.game.time.events.add(Phaser.Timer.SECOND * 0.1, function(){
+            this.setState({ type: 'DIE', priority: 10, time: this.game.time.now + 300 });
+        }, this);
+    }
+};
+
 module.exports = Bullet;
\ No newline at end of file
diff --git a/client/src/game.js b/client/src/game.js
index 4beac6d..0766910 100644
--- a/client/src/game.js
+++ b/client/src/game.js
@@ -34,22 +34,52 @@ function AsteroidAdventures(){
             NUMBER_OF_BULLETS: 10,
             SHOT_DELAY: 200, 
             animations: [
-                { name: 'IDLE', frames: ['43'], fps: 10, loop: true }    
+                { 
+                    name: 'IDLE', 
+                    frames: ['43'], 
+                    fps: 10, 
+                    loop: true
+                }    
             ]
         });
         
         // load those freakin bullets!
         for(var i = 0; i < ship.props.NUMBER_OF_BULLETS; i++) {
-            var bullet = new Bullet(this.game, 0, 0, 'ships');
+            var bullet = new Bullet(this.game, 0, 0, 'ships', {
+                animations: [
+                    { 
+                        name: 'IDLE', 
+                        frames: ['44'], 
+                        fps: 10, 
+                        loop: true
+                    }, { 
+                        name: 'EXPLODE', 
+                        frames: ['60', '63', '64'], 
+                        fps: 10, 
+                        loop: false
+                    }
+                ]
+            });
             bullet.listen(this.eventsOf.collision, bullet.explode);
             ship.bullets.add(bullet);
             bullet.kill();
         }
         
+        var asteroidSprites = ['01','02','03','04','05','06','07','08'];
+            
         asteroids = this.game.add.group();
         
         for(var j=0;j<20;j++){
-            var asteroid =  new Asteroid(this.game, Math.random() * this.world.width, Math.random() * this.world.height, 'asteroids');
+            var asteroid =  new Asteroid(this.game, Math.random() * this.world.width, Math.random() * this.world.height, 'asteroids', {
+                animations: [
+                    { 
+                        name: 'IDLE', 
+                        frames: [Math.floor(Math.random() * asteroidSprites.length)], 
+                        fps: 10, 
+                        loop: true
+                    }
+                ]    
+            });
             asteroid.body.velocity.x = asteroid.body.velocity.x + Math.random() * 50 - Math.random() * 50;
             asteroid.body.velocity.y = asteroid.body.velocity.y + Math.random() * 50 - Math.random() * 50;
             asteroids.add(asteroid);
@@ -76,10 +106,8 @@ function AsteroidAdventures(){
             this.eventsOf.collision.dispatch({ type: actionTypes.COLLISION });
         }.bind(this));
         
-        ship.bullets.forEachAlive(function(bullet){
-            this.game.physics.arcade.collide(bullet, asteroids, function(){
-                this.eventsOf.collision.dispatch({ type: actionTypes.HIT });
-            }.bind(this));
+        this.game.physics.arcade.collide(ship.bullets, asteroids, function(bullet, asteroid){
+            this.eventsOf.collision.dispatch({ type: actionTypes.HIT, target: asteroid.id });
         }.bind(this));
         
         if(keys.left.isDown){
diff --git a/client/src/gameobject.js b/client/src/gameobject.js
index 97cfd38..2b9d9f8 100644
--- a/client/src/gameobject.js
+++ b/client/src/gameobject.js
@@ -65,6 +65,7 @@ GameObject.prototype.hasState = function(stateToTest){
 
 GameObject.prototype.update = function(){
     if(!this.state){ return; }
+
     console.log('state length: ', this.state.length);
     var state = this.getState();
     this.animations.play(state.type);
@@ -72,7 +73,10 @@ GameObject.prototype.update = function(){
 };
 
 GameObject.prototype.setId = function(){
-    this.id = this.constructor.name + '-' + (this.x | 0) + '-' + (this.y | 0);
+    this.id = this.constructor.name + '-' 
+        + (this.x | 0) + '-' 
+        + (this.y | 0) + '-'
+        + Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 5);
 };
 
 GameObject.prototype.debug = function(toDebug){
diff --git a/client/src/ship.js b/client/src/ship.js
index efc53b3..d4e09e7 100644
--- a/client/src/ship.js
+++ b/client/src/ship.js
@@ -25,6 +25,7 @@ function Ship(game, x, y, sprite, props){
             return; 
         }
         bullet.revive();
+        bullet.state = [];
         bullet.reset(this.x, this.y);
 
         // Shoot it
